(()=>{"use strict";function t(t){return`üéñ${t.level} ‚öî${t.attack} üõ°${t.defence} ‚ù§${t.health}`}function e(t,e){return{row:Math.floor(t/e),col:t%e}}function s(t,e){return t.row*e+t.col}function a(t,e){return Math.max(t-e,.1*t)}class i{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t}drawUi(t){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(t=>this.onNewGameClick(t))),this.saveGameEl.addEventListener("click",(t=>this.onSaveGameClick(t))),this.loadGameEl.addEventListener("click",(t=>this.onLoadGameClick(t))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(t);for(let t=0;t<this.boardSize**2;t+=1){const a=document.createElement("div");a.classList.add("cell","map-tile","map-tile-"+((e=t)<(s=this.boardSize)?0===e?"top-left":e===s-1?"top-right":"top":e%s==0?e===s*(s-1)?"bottom-left":"left":e%s==s-1?e===s*s-1?"bottom-right":"right":e>s*(s-1)?"bottom":"center")),a.addEventListener("mouseenter",(t=>this.onCellEnter(t))),a.addEventListener("mouseleave",(t=>this.onCellLeave(t))),a.addEventListener("click",(t=>this.onCellClick(t))),this.boardEl.appendChild(a)}var e,s;this.cells=Array.from(this.boardEl.children)}redrawPositions(t){for(const t of this.cells)t.innerHTML="";for(const s of t){const t=this.boardEl.children[s.position],a=document.createElement("div");a.classList.add("character",s.character.type);const i=document.createElement("div");i.classList.add("health-level");const o=document.createElement("div");o.classList.add("health-level-indicator","health-level-indicator-"+((e=s.character.health)<15?"critical":e<50?"normal":"high")),o.style.width=`${s.character.health}%`,i.appendChild(o),a.appendChild(i),t.appendChild(a)}var e}addCellEnterListener(t){this.cellEnterListeners.push(t)}addCellLeaveListener(t){this.cellLeaveListeners.push(t)}addCellClickListener(t){this.cellClickListeners.push(t)}addNewGameListener(t){this.newGameListeners.push(t)}addSaveGameListener(t){this.saveGameListeners.push(t)}addLoadGameListener(t){this.loadGameListeners.push(t)}onCellEnter(t){t.preventDefault();const e=this.cells.indexOf(t.currentTarget);this.cellEnterListeners.forEach((t=>t.call(null,e)))}onCellLeave(t){t.preventDefault();const e=this.cells.indexOf(t.currentTarget);this.cellLeaveListeners.forEach((t=>t.call(null,e)))}onCellClick(t){const e=this.cells.indexOf(t.currentTarget);this.cellClickListeners.forEach((t=>t.call(null,e)))}onNewGameClick(t){t.preventDefault(),this.newGameListeners.forEach((t=>t.call(null)))}onSaveGameClick(t){t.preventDefault(),this.saveGameListeners.forEach((t=>t.call(null)))}onLoadGameClick(t){t.preventDefault(),this.loadGameListeners.forEach((t=>t.call(null)))}static showError(t){alert(t)}static showMessage(t){alert(t)}selectCell(t,e="yellow"){this.deselectCell(t),this.cells[t].classList.add("selected",`selected-${e}`)}deselectCell(t){const e=this.cells[t];e.classList.remove(...Array.from(e.classList).filter((t=>t.startsWith("selected"))))}showCellTooltip(t,e){this.cells[e].title=t}hideCellTooltip(t){this.cells[t].title=""}showDamage(t,e){return new Promise((s=>{const a=this.cells[t],i=document.createElement("span");i.textContent=e,i.classList.add("damage"),a.appendChild(i),i.addEventListener("animationend",(()=>{a.removeChild(i),s()}))}))}setCursor(t){this.boardEl.style.cursor=t}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}}const o="prairie",r="desert",l="arctic",n="mountain",h="auto",c="pointer",d="crosshair",m="not-allowed";class u{constructor(t){this.characters=[...t]}}class y{constructor(t,e="generic"){if(this.constructor===y)throw new TypeError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Character");this.level=t,this.health=50,this.attack=0,this.defence=0,this.type=e}upgradeStats(){this.attack=Math.floor(Math.max(this.attack,this.attack*(80+this.health)/100)),this.defence=Math.floor(Math.max(this.defence,this.defence*(80+this.health)/100)),this.health=Math.floor(Math.min(100,this.health+80))}}class f{constructor(t,e){if(!(t instanceof y))throw new Error("character must be instance of Character or its children");if("number"!=typeof e)throw new Error("position must be a number");this.character=t,this.position=e}}function p(t,e,s,a){const i=function*(t,e){for(;;){const s=Math.ceil(Math.random()*e),a=Math.floor(Math.random()*t.length);yield new t[a](s)}}(t,e),o=[];for(let t=0;t<s;t++)o.push(new f(i.next().value,a[t]));return new u(o)}function g(t,e,a){const i=new Set;for(;i.size<t;)i.add(s({row:Math.floor(Math.random()*a),col:e[Math.floor(Math.random()*e.length)]},a));return Array.from(i)}class v extends y{constructor(t){if(super(t,"bowman"),this.attack=25,this.defence=25,this.movementRadius=2,this.attackRadius=2,t>1)for(let e=1;e<t;e++)this.upgradeStats()}}class w extends y{constructor(t){if(super(t,"swordsman"),this.attack=40,this.defence=10,this.movementRadius=4,this.attackRadius=1,t>1)for(let e=1;e<t;e++)this.upgradeStats()}}class P extends y{constructor(t){if(super(t,"magician"),this.attack=10,this.defence=40,this.movementRadius=1,this.attackRadius=4,t>1)for(let e=1;e<t;e++)this.upgradeStats()}}class b extends y{constructor(t){if(super(t,"vampire"),this.attack=25,this.defence=25,this.movementRadius=2,this.attackRadius=2,t>1)for(let e=1;e<t;e++)this.upgradeStats()}}class k extends y{constructor(t){if(super(t,"undead"),this.attack=40,this.defence=10,this.movementRadius=4,this.attackRadius=1,t>1)for(let e=1;e<t;e++)this.upgradeStats()}}class L extends y{constructor(t){if(super(t,"daemon"),this.attack=10,this.defence=10,this.movementRadius=1,this.attackRadius=4,t>1)for(let e=1;e<t;e++)this.upgradeStats()}}class C{constructor(t,e,s=o,a=1){this.playerPositions=t,this.enemyPositions=e,this.theme=s,this.level=a,this.playersTurn=!0,this.selected=null}get positions(){return[...this.playerPositions,...this.enemyPositions]}static from(t){return new C(t.playerPositions,t.enemyPositions,t.theme,t.level)}}const M=new i;M.bindToDOM(document.querySelector("#game-container"));const E=new class{constructor(t){this.storage=t}save(t){this.storage.setItem("state",JSON.stringify(t))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(t){throw new Error("Invalid state")}}}(localStorage),S=new class{constructor(t,e){this.gamePlay=t,this.stateService=e,this.state=null,this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this)),this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this)),this.gamePlay.addCellClickListener(this.onCellClick.bind(this)),this.gamePlay.addSaveGameListener(this.saveGame.bind(this)),this.gamePlay.addLoadGameListener(this.loadGame.bind(this)),this.gamePlay.addNewGameListener(this.newGame.bind(this))}init(){this.gamePlay.drawUi(o),this.loadGame(),null===this.state&&this.newGame()}onCellClick(t){const e=this.state.playerPositions.find((e=>e.position===t));if(e)return this.state.selected&&this.gamePlay.deselectCell(this.state.selected.position),this.state.selected=e,void this.gamePlay.selectCell(t);const s=this.state.enemyPositions.find((e=>e.position===t));if(s)return null===this.state.selected?void i.showError("–≠—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"):void(this.canAttack(this.state.selected,t)&&this.attack(this.state.selected,s));this.state.selected&&this.canMove(this.state.selected,t)&&this.move(this.state.selected,t)}onCellEnter(e){const s=this.state.playerPositions.find((t=>t.position===e)),a=this.state.enemyPositions.find((t=>t.position===e));s?(this.gamePlay.showCellTooltip(t(s.character),e),this.gamePlay.setCursor(c)):a?(this.gamePlay.showCellTooltip(t(a.character),e),this.state.selected&&(this.canAttack(this.state.selected,a.position)?(this.gamePlay.setCursor(d),this.gamePlay.selectCell(e,"red")):this.gamePlay.setCursor(m))):this.state.selected&&this.canMove(this.state.selected,e)?(this.gamePlay.setCursor(c),this.gamePlay.selectCell(e,"green")):this.gamePlay.setCursor(m)}onCellLeave(t){const e=this.state.playerPositions.find((e=>e.position===t)),s=this.state.enemyPositions.find((e=>e.position===t));e||this.gamePlay.deselectCell(t),(e||s)&&this.gamePlay.hideCellTooltip(t),this.gamePlay.setCursor(h)}newGame(){this.state&&this.deselectAll(),this.setTheme(o);const t=g(3,[0,1],this.gamePlay.boardSize),e=g(3,[this.gamePlay.boardSize-1,this.gamePlay.boardSize-2],this.gamePlay.boardSize),s=p([v,w,P],1,3,t),a=p([b,k,L],1,3,e);this.state=new C(s.characters,a.characters),this.gamePlay.redrawPositions(this.state.positions)}saveGame(){this.state.selected&&(this.state.selected=null),this.stateService.save(this.state)}loadGame(){this.state&&this.state.selected&&this.deselectAll();try{this.state=C.from(this.stateService.load()),this.gamePlay.drawUi(this.state.theme),this.gamePlay.redrawPositions(this.state.positions)}catch(t){i.showError(t)}}deselectAll(){this.state.selected&&(this.state.selected=null);for(let t=0;t<this.gamePlay.boardSize**2;t++)this.gamePlay.deselectCell(t)}canMove(t,s){if(this.state.positions.find((t=>t.position===s)))return!1;const a=e(t.position,this.gamePlay.boardSize),i=t.character.movementRadius,o=e(s,this.gamePlay.boardSize);return Math.abs(o.row-a.row)<=i&&Math.abs(o.col-a.col)<=i&&(o.col===a.col||o.row===a.row||Math.abs(o.row-a.row)===Math.abs(o.col-a.col))}canAttack(t,s){if(t.position===s)return!1;const a=e(s,this.gamePlay.boardSize),i=e(t.position,this.gamePlay.boardSize),o=t.character.attackRadius;return Math.abs(a.row-i.row)<=o&&Math.abs(a.col-i.col)<=o}move(t,e){const s=t.position;this.state.positions.find((t=>t.position===s)).position=e,this.deselectAll(),this.gamePlay.redrawPositions(this.state.positions),this.next()}attack(t,e){const s=a(t.character.attack,e.character.defence);e.character.health-=s,this.gamePlay.showDamage(e.position,s).then((()=>{if(e.character.health<=0){if(this.characterDeath(e),0===this.state.enemyPositions.length)return this.levelUp(this.state.selected.character),void this.deselectAll();if(0===this.state.playerPositions.length)return this.endGame("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"),void this.deselectAll()}this.deselectAll(),this.gamePlay.redrawPositions(this.state.positions),this.next()}))}characterDeath(t){var e;"undead"===(e=t.character).type||"vampire"===e.type||"daemon"===e.type?this.state.enemyPositions.splice(this.state.enemyPositions.indexOf(t),1):this.state.playerPositions.splice(this.state.playerPositions.indexOf(t),1),this.gamePlay.redrawPositions(this.state.positions)}enemyMove(){const t=[],e=[];if(this.state.enemyPositions.forEach((s=>{this.state.playerPositions.forEach((i=>{this.canAttack(i,s.position)&&t.push({enemy:s,player:i,damage:a(i.character.attack,s.character.defence)/s.character.health}),this.canAttack(s,i.position)&&e.push({enemy:s,player:i,damage:a(s.character.attack,i.character.defence)/i.character.health})}))})),t.sort(((t,e)=>e.damage-t.damage)),e.sort(((t,e)=>e.damage-t.damage)),e[0]&&t[0])if(t[0].damage>e[0].damage){const s=this.searchSafeZone(t[0].enemy,t[0].player);-1===s?this.attack(e[0].enemy,e[0].player):this.move(t[0].enemy,s)}else this.attack(e[0].enemy,e[0].player);else if(e[0]&&0===t.length)this.attack(e[0].enemy,e[0].player);else if(t[0]&&0===e.length){const e=this.searchSafeZone(t[0].enemy,t[0].player);-1===e?this.randomEnemyMove(!1):this.move(t[0].enemy,e)}else this.randomEnemyMove(!0)}searchSafeZone(t,a){const i=t.character.radius,o=e(t.position,this.gamePlay.boardSize),r=o.row-i<0?0:o.row-i,l=o.row+i>=this.gamePlay.boardSize?this.gamePlay.boardSize-1:o.row+i,n=o.col-i<0?0:o.col-i,h=o.col+i>=this.gamePlay.boardSize?this.gamePlay.boardSize-1:o.col+i,c=[];for(let e=r;e<=l;e++)for(let i=n;i<=h;i++){const o=s({row:e,col:i},this.gamePlay.boardSize);this.canMove(t,o)&&!this.canAttack(a,o)&&c.push(o)}return c.length>0?c[Math.floor(Math.random()*c.length)]:-1}randomEnemyMove(t){if(t){const t=[];if(this.state.playerPositions.forEach((e=>{this.state.enemyPositions.forEach((s=>{const a=this.searchSafeZone(s,e);-1!=a&&t.push({enemy:s,index:a})}))})),t.length>0){const e=t[Math.floor(Math.random()*t.length)];return void this.move(e.enemy,e.index)}}const a=this.state.enemyPositions[Math.floor(Math.random()*this.state.enemyPositions.length)],i=e(a.position,this.gamePlay.boardSize),o=a.character.movementRadius;let r;do{const t=Math.floor(8*Math.random()),e=Math.ceil(Math.random()*o);switch(t){case 0:r={row:i.row-e,col:i.col};break;case 1:r={row:i.row-e,col:i.col+e};break;case 2:r={row:i.row,col:i.col+e};break;case 3:r={row:i.row+e,col:i.col+e};break;case 4:r={row:i.row+e,col:i.col};break;case 5:r={row:i.row+e,col:i.col-e};break;case 6:r={row:i.row,col:i.col-e};break;default:r={row:i.row-e,col:i.col-e}}r.row=Math.max(0,Math.min(r.row,this.gamePlay.boardSize-1)),r.col=Math.max(0,Math.min(r.col,this.gamePlay.boardSize-1))}while(!this.canMove(a,s(r,this.gamePlay.boardSize)));this.move(a,s(r,this.gamePlay.boardSize))}next(){this.state.playersTurn=!this.state.playersTurn,!1===this.state.playersTurn&&this.enemyMove()}levelUp(t){if(4===this.state.level)return void this.endGame("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!");this.state.level+=1,t.level+=1,t.attack=Math.floor(Math.max(t.attack,t.attack*(80+t.health)/100)),t.defence=Math.floor(Math.max(t.defence,t.defence*(80+t.health)/100)),t.health=Math.floor(Math.min(100,t.health+80));const e=g(this.state.playerPositions.length,[0,1],this.gamePlay.boardSize);for(let t=0;t<this.state.playerPositions.length;t++)this.state.playerPositions[t].position=e[t];const s=g(3,[this.gamePlay.boardSize-1,this.gamePlay.boardSize-2],this.gamePlay.boardSize),a=p([b,k,L],Math.max(...this.state.playerPositions.map((t=>t.character.level))),3,s);this.state.enemyPositions=a.characters,this.nextTheme(),this.gamePlay.redrawPositions(this.state.positions)}endGame(t){i.showMessage(t),this.gamePlay.container.querySelector(".board").style.pointerEvents="none"}nextTheme(){switch(this.state.theme){case o:this.setTheme(r);break;case r:this.setTheme(l);break;case l:this.setTheme(n);break;default:this.setTheme(o)}}setTheme(t){this.gamePlay.drawUi(t),this.state.theme=t}}(M,E);S.init()})();